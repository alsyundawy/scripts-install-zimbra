---
- name: Configure Ceph Admin Access, Timezone, and Host Mappings
  hosts: all
  become: true
  vars:
    ceph_admin_user: ceph-admin
    ssh_pub_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/ceph_admin.key.pub') }}"
    timezone_region: "UTC"

    # Define your IP <-> hostname map here
    hosts_map:
      - ip: "192.168.1.10"
        fqdn: "ceph-mon1.example.com"
        short: "ceph-mon1"
      - ip: "192.168.1.11"
        fqdn: "ceph-mon2.example.com"
        short: "ceph-mon2"
      - ip: "192.168.1.12"
        fqdn: "ceph-mon3.example.com"
        short: "ceph-mon3"

  tasks:

    - name: Update package index
      package:
        update_cache: yes

    - name: Install chrony
      package:
        name: chrony
        state: present

    - name: Enable and start chrony (RHEL)
      service:
        name: chronyd
        state: started
        enabled: yes
      when: ansible_facts['os_family'] == "RedHat"

    - name: Enable and start chrony (Debian)
      service:
        name: chrony
        state: started
        enabled: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Set timezone
      timezone:
        name: "{{ timezone_region }}"

    - name: Create ceph-admin user with sudo access
      user:
        name: "{{ ceph_admin_user }}"
        groups: sudo
        append: yes
        shell: /bin/bash
        create_home: yes

    - name: Configure passwordless sudo for ceph-admin
      copy:
        dest: "/etc/sudoers.d/{{ ceph_admin_user }}"
        content: "{{ ceph_admin_user }} ALL=(ALL) NOPASSWD:ALL\n"
        owner: root
        group: root
        mode: '0440'

    - name: Add SSH public key to ceph-admin authorized_keys
      authorized_key:
        user: "{{ ceph_admin_user }}"
        key: "{{ ssh_pub_key }}"
        state: present

    - name: Update /etc/hosts with all cluster nodes
      lineinfile:
        path: /etc/hosts
        create: yes
        state: present
        regexp: '^{{ item.ip }}\\s'
        line: "{{ item.ip }} {{ item.fqdn }} {{ item.short }}"
      loop: "{{ hosts_map }}"

    - name: Set hostname if this host matches IP in hosts_map
      hostname:
        name: "{{ item.short }}"
      loop: "{{ hosts_map }}"
      when: item.ip == ansible_host or item.ip == ansible_facts['default_ipv4']['address']
